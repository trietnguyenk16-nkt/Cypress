REFERENCE: https://docs.cypress.io/guides/guides/launching-browsers

1/ CYPRESS INSTALLATION AND PROJECT SET UP
+ Download NodeJs
+ Set NodeJs home in environmental variables
+ Create Bas Cypress working folder
+ Download Visual Studio Code editor
+ Generate Package.json
+ Download Cypress Dependencies
+ Start Cypress Test Runner
+ Explore Project Structure generated by Cypress
+ Understand Cypress Test writting principles (describe, it)
+ Create first Cypress test case
+ Understand how to run tests from Test Runner and Command Line

2/ NOTES:
a/ in root folder , use npx cypress run OR npx cypress open
if want to run cypress in node_module/.bin

root folder> /node_modules/.bin/cypress open (or run)

do not cd to /node_modules/.bin/ then run cypress open because it will throw error missing supportFiles

refer: https://docs.cypress.io/guides/guides/command-line#How-to-run-commands

b/ in root folder, the file cypress.config.js is accessible on global level.
This is like a configuration file for your entire framework.
So in this configuration file, we will set all the properties on which and how your cypress test should behave

Default configurations are in : open cypress test runner, => Settings on the left bar => Project Settings => see the default values that are already defined.
=> You can override and change the default configurations by setting the value in cypress.config.js

c/ support folder contains commands.js file contains reusable code
d/ fixture folder contains test data
e/ integration folder contains test suites and tests cases (spec files)
f/ plugin folder can be consider as Listener (what to do before/after test, when test case failed, ...)
g/ 
// type definitions for Cypress object "cy"
/// <reference types="cypress" />

// type definitions for custom commands like "createDefaultTodos"
/// <reference types="../support" />
h/ Assertions: Cypress bundles the popular Chai assertion library
i/ Testing framework: Cypress bundles the Mocha testing framework
j/ Cypress is built based on NodeJS and build Javascript program
=> So Cypress is ansynchronous (all commands are sent to the server at a time and not a sequence)

However, you can see that cypress commands sent in a sequence 
=> that because Cypress technician already handled Cypress asynchronous in backend for use

Reference: https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Commands-Are-Asynchronous

k/
NOTE: 
        / if we do commands in separate lines as below:
        // const logo = cy.get('.brand')
        // cy.log(logo.text())
        // => cypress test runner will return logo.text() is not a function
        // this is because cy.get has promise, and it is cypress commands so cypress technician already handled this promise
        // but logo.text (in a separate line) is your custom command and it has not ability to resolve a promise from const logo and accept logo input
        // the child method cy.log(logo.text()) is then break
        // => IMPORTANT: Non cypress commands cannot resvole promise by themselves. we need to manually resolve it by then()
		// => you must manually handle promise for constant logo by your self so that logo.text understand and has ability to handle a promise from const logo
        // you should also know promise is like a STATE with 3 status: RESOLVED, REJECTION and PENDING
        // => use keyword then to wait for promise is RESOLVED. See solution below:
        // cy.get('.brand').then(function(logo) {
            //cy.log(logo.text())
        //})
		
l/ NOTE:
        // cy.get('.products').find('.product')
        // cy.get is cypress command 
        // find is also cypress command
        // With the concatenation of 2 cypress commands
        // so the child commands (find()) can has ability to resolve the promise from cy.get and accept the parent input
        // however text() is not cypress command (its a jquery methods) so cy.get('.products').find('.product').text() will not work with TypeError: cy.get(...).find(...).text is not a function
        // you might wonder why  the .text() below can work
        //cy.get('.products>.product').each(($el, index, $list) => {
        //   const textVeg = $el.find('.product-name').text()
        //})
        // this is because in each, $el we already resolved the promise (index returning is resolved and not the promise anymore so it can has ability to understand
		//(Cypress commands yield jQuery objects so you can use cy.get('.products').find('.product') with .text() but the .text() is jquery cannot resolved promises so its break )
		Reference: https://docs.cypress.io/faq/questions/using-cypress-faq
		
m/ 
//NOTE: currently, when you use $el.find('.button').click(), the click button is deprecate and got a straight
                // this is because $el is returned with a promise
                // if we do not resolve a promise, the click will got a straight
                // so in order to resolve a promise, use wrap method. See below
                cy.wrap($el).find('.button').click()
				
				
n/ How find('locator') method will work in cypress? 
=> It will search and filter based on cy.get('locator')

o/ function().then()  is the same with '=>' (both of them is to resolve a promise)
p/ To handle child windows or child tab:

Way 1: Remove target Attribute (should use this)
Way 2: get Href Attribute and cy.visit(url from href attribute)
(should not use this because cy.visit does not accept different domains or cross domains)

q/ To change cypress default config => update cypress.config.js
So the config will be applied to all
https://docs.cypress.io/guides/references/configuration#Timeouts

However, you can also override configuration values within your test using Cypress.config()
https://docs.cypress.io/api/cypress-api/config#Examples 
For example: declare this in TC (inside it('testcasse')):
Cypress.config('defaultCommandTimeout', 8000)
=> so the configuration is only applied to that TC

To apply config for only 1 step: declare Cypress.config('defaultCommandTimeout', 8000) above the step
=> so the configuration is only applied to the step and remainning below steps

3/ SETTINGS UP TEST HOOKS
Cypress supports Hooks provided by Mocha testing framework
These are helpful to set conditions that you want to run before a set of tests or before each test.
They're also helpful to clean up conditions after a set of tests or after each test.
https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Structure

All before() hooks run (once)
Any beforeEach() hooks run
Tests run
Any afterEach() hooks run
All after() hooks run (once)

4/ Cypress retries
https://docs.cypress.io/guides/guides/test-retries

Add this to cypress.config.js
retries: {
        // Configure retry attempts for `cypress run`
        // Default is 0
        "runMode": 2,
        // Configure retry attempts for `cypress open`
        // Default is 0
        "openMode": 0
      }

5/ To set up cypress command lines in shortcut
Go to package.json , inside scripts, set up some shortcut command lines, such as:
"scripts": {
    "baseTest": "npx cypress run",
    "test": "npx cypress run --spec cypress/integration/Framework/PageObjectsExample.js --reporter mochawesome",
    "headTest": "npm run baseTest -- --headed",
    "chromeTest": "npm run baseTest -- --browser chrome",
    "recordDashboardTest": "npm run baseTest -- --record --key 615cca50-5876-44a4-af37-d5f8834c9c29"
  }
=> so when we want to run the test in HeadTest , just go for: npm run headTest
instead of writting down long commands

6/ To add some global configurations or environment configuration to cypress
=> go to cypress.config.js then in env, set up some global/environment configurations
example: 

env : {
      url: "https://rahulshettyacademy.com/angularpractice/"
    }

and in test case, we can call the url configurations by using this syntax: cy.visit(Cypress.env('url'))
	
7/ In order to run test, and update/show test process or report on cypress dashboard
we must specify the key of dashboard in the command line
such as: npx cypress run --record --key 615cca50-5876-44a4-af37-d5f8834c9c29 

615cca50-5876-44a4-af37-d5f8834c9c29  is the key and can be gotten when you login to cypress dashboard of your organization

8/ If we do not use cypress dashboard for the test report, we can use mochawesome instead
Steps:
1) Install mocha and mochawesome using npm
npm mocha install --save-dev
npm mochawesome install --save-dev

2) in cypress.config.js add this:
reporter: "mochawesome"

3) when you run test case: it will create a report inside mochawesome-report under root folder of your automation project
	
8/ INVESTIGATE:
a/ when to use:
+ npm run cy:run
+ npx cypress run

and what is the difference?

b/ compare typescript and javascript
c/ cypress use typescript or javascript?
d/ describe, it belong to mocha. Does it belong to javascript or typescript also?
e/ why cannot use this cy.get('input[name="name"]:nth-child(2)').invoke('attr','minlength').should('have.text','2')(ReadAttributeAndAssert.js)
f/ need to know about difference about prop and attr of jquery

